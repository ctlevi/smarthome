{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Parameters": {
        "WebsiteDomain": {
            "Type": "String",
            "Description": "Enter your website domain, e.g. tatesmarthome.com"
        },
        "GlobalPassword": {
            "Type": "String",
            "Description": "Enter the of the password to protect the lambda function (you will enter this when you access the website for the first time)"
        },
        "CodeBucket": {
            "Type": "String",
            "Description": "Enter the name of the bucket where the lambda code is stored"
        },
        "AlexaSkillId": {
            "Type": "String",
            "Description": "Enter the skill id of the Alexa smart home application"
        },
        "ApiGatewayStageName": {
            "Type": "String",
            "AllowedPattern": "^[a-z0-9]+$",
            "Default": "prod"
        },
        "IoTThingName": {
            "Type": "String",
            "Default": "RaspberryPi"
        }
    },
    "Resources": {
        "WebsiteBucket": {
            "Type": "AWS::S3::Bucket",
            "Metadata": {
                "Comment": "Really just creating this in case you ever need it since buckets are globally unique across AWS. I only needed the www bucket, but some AWS setup pages seem like you might want to redirect from www to root. But my domain provider seems to do that for me. https://docs.aws.amazon.com/AmazonS3/latest/dev/website-hosting-custom-domain-walkthrough.html"
            },
            "Properties": {
                "BucketName": {
                    "Ref": "WebsiteDomain"
                }
            }
        },
        "WWWWebsiteBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "BucketName": {
                    "Fn::Join": [
                        "",
                        [
                            "www.",
                            {
                                "Ref": "WebsiteDomain"
                            }
                        ]
                    ]
                },
                "AccessControl": "PublicRead",
                "WebsiteConfiguration": {
                    "IndexDocument": "index.html",
                    "ErrorDocument": "error.html"
                }
            },
            "DeletionPolicy": "Retain"
        },
        "WebsiteBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
                "PolicyDocument": {
                    "Id": "MyPolicy",
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Sid": "PublicReadForGetBucketObjects",
                            "Effect": "Allow",
                            "Principal": "*",
                            "Action": "s3:GetObject",
                            "Resource": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "arn:aws:s3:::",
                                        {
                                            "Ref": "WWWWebsiteBucket"
                                        },
                                        "/*"
                                    ]
                                ]
                            }
                        }
                    ]
                },
                "Bucket": {
                    "Ref": "WWWWebsiteBucket"
                }
            }
        },
        "SwitchesDynamoTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
                "TableName": "switches",
                "AttributeDefinitions": [
                    {
                        "AttributeName": "id",
                        "AttributeType": "S"
                    }
                ],
                "KeySchema": [
                    {
                        "AttributeName": "id",
                        "KeyType": "HASH"
                    }
                ],
                "ProvisionedThroughput": {
                    "ReadCapacityUnits": 5,
                    "WriteCapacityUnits": 5
                }
            }
        },
        "LambdaFunctionRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess",
                    "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                    "arn:aws:iam::aws:policy/AWSIoTFullAccess",
                    "arn:aws:iam::aws:policy/CloudWatchEventsFullAccess"
                ]
            }
        },
        "LambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "FunctionName": "SmarthomeFunction",
                "Handler": "index.handler",
                "MemorySize": 3008,
                "Code": {
                    "S3Bucket": {
                        "Ref": "CodeBucket"
                    },
                    "S3Key": "lambda.zip"
                },
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaFunctionRole",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs8.10",
                "Environment": {
                    "Variables": {
                        "GLOBAL_PASSWORD": {
                            "Ref": "GlobalPassword"
                        },
                        "THING_NAME": {
                            "Ref": "IoTThingName"
                        }
                    }
                }
            }
        },
        "LambdaFunctionAlexaPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:InvokeFunction",
                "FunctionName": {
                    "Fn::GetAtt": [
                        "LambdaFunction",
                        "Arn"
                    ]
                },
                "Principal": "alexa-connectedhome.amazon.com",
                "EventSourceToken": {
                    "Ref": "AlexaSkillId"
                }
            }
        },
        "LambdaFunctionSmarthomeAPIPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:InvokeFunction",
                "FunctionName": {
                    "Fn::GetAtt": [
                        "LambdaFunction",
                        "Arn"
                    ]
                },
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                    "Fn::Sub": [
                        "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${id}/*/*/*",
                        {
                            "id": {
                                "Ref": "SmarthomeAPI"
                            }
                        }
                    ]
                }
            }
        },
        "SmarthomeAPI": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
                "Name": "SmarthomeAPI"
            }
        },
        "SmarthomeAPIResource": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Fn::GetAtt": [
                        "SmarthomeAPI",
                        "RootResourceId"
                    ]
                },
                "RestApiId": {
                    "Ref": "SmarthomeAPI"
                },
                "PathPart": "graphql"
            }
        },
        "SmarthomeAPIGraphQLMethod": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "HttpMethod": "POST",
                "ResourceId": {
                    "Ref": "SmarthomeAPIResource"
                },
                "RestApiId": {
                    "Ref": "SmarthomeAPI"
                },
                "AuthorizationType": "NONE",
                "Integration": {
                    "IntegrationHttpMethod": "POST",
                    "Type": "AWS_PROXY",
                    "Uri": {
                        "Fn::Sub": [
                            "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations",
                            {
                                "lambdaArn": {
                                    "Fn::GetAtt": [
                                        "LambdaFunction",
                                        "Arn"
                                    ]
                                }
                            }
                        ]
                    }
                }
            }
        },
        "SmarthomeAPIOptionsMethod": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "ResourceId": {
                    "Ref": "SmarthomeAPIResource"
                },
                "RestApiId": {
                    "Ref": "SmarthomeAPI"
                },
                "Integration": {
                    "IntegrationResponses": [
                        {
                            "StatusCode": 200,
                            "ResponseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'global-password,Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                                "method.response.header.Access-Control-Allow-Methods": "'POST,OPTIONS'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            },
                            "ResponseTemplates": {
                                "application/json": ""
                            }
                        }
                    ],
                    "PassthroughBehavior": "WHEN_NO_MATCH",
                    "RequestTemplates": {
                        "application/json": "{\"statusCode\": 200}"
                    },
                    "Type": "MOCK"
                },
                "MethodResponses": [
                    {
                        "StatusCode": 200,
                        "ResponseModels": {
                            "application/json": "Empty"
                        },
                        "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Headers": false,
                            "method.response.header.Access-Control-Allow-Methods": false,
                            "method.response.header.Access-Control-Allow-Origin": false
                        }
                    }
                ]
            }
        },
        "SmarthomeAPIDeployment": {
            "Type": "AWS::ApiGateway::Deployment",
            "DependsOn": [
                "SmarthomeAPIGraphQLMethod",
                "SmarthomeAPIOptionsMethod"
            ],
            "Properties": {
                "RestApiId": {
                    "Ref": "SmarthomeAPI"
                }
            }
        },
        "SmarthomeAPIStage": {
            "Type": "AWS::ApiGateway::Stage",
            "Properties": {
                "StageName": {
                    "Ref": "ApiGatewayStageName"
                },
                "RestApiId": {
                    "Ref": "SmarthomeAPI"
                },
                "DeploymentId": {
                    "Ref": "SmarthomeAPIDeployment"
                },
                "MethodSettings": [
                    {
                        "HttpMethod": "*",
                        "ResourcePath": "/*",
                        "ThrottlingRateLimit": 1,
                        "ThrottlingBurstLimit": 5
                    }
                ]
            }
        },
        "IoTThing": {
            "Type": "AWS::IoT::Thing",
            "Properties": {
                "ThingName": {
                    "Ref": "IoTThingName"
                }
            }
        },
        "IoTThingPolicy": {
            "Type": "AWS::IoT::Policy",
            "Properties": {
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Action": [
                                "iot:*"
                            ],
                            "Resource": [
                                "*"
                            ],
                            "Effect": "Allow"
                        }
                    ]
                },
                "PolicyName": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "IoTThingName"
                            },
                            "Policy"
                        ]
                    ]
                }
            }
        }
    },
    "Outputs": {
        "WebsiteURL": {
            "Value": {
                "Fn::GetAtt": [
                    "WWWWebsiteBucket",
                    "WebsiteURL"
                ]
            },
            "Description": "URL for website hosted on S3"
        },
        "GraphQLURL": {
            "Value": {
                "Fn::Sub": [
                    "https://${id}.execute-api.${AWS::Region}.amazonaws.com/${stage}",
                    {
                        "id": {
                            "Ref": "SmarthomeAPI"
                        },
                        "stage": {
                            "Ref": "ApiGatewayStageName"
                        }
                    }
                ]
            }
        }
    }
}